<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ReactとVueで同じ機能を実現する実装方法比較</title>
      <link href="/2022/02/21/react-vs-vue/"/>
      <url>/2022/02/21/react-vs-vue/</url>
      
        <content type="html"><![CDATA[<h3 id="前提：ReactとVueのバージョン"><a href="#前提：ReactとVueのバージョン" class="headerlink" title="前提：ReactとVueのバージョン"></a>前提：ReactとVueのバージョン</h3><ul><li>React:v17.0.2</li><li> Vue: 3.2.29</li></ul><h3 id="実現しようとする機能一覧と関連技術ポイント"><a href="#実現しようとする機能一覧と関連技術ポイント" class="headerlink" title="実現しようとする機能一覧と関連技術ポイント"></a>実現しようとする機能一覧と関連技術ポイント</h3><table><thead><tr><th>機能名</th><th>React関連技術ポイント</th><th>Vue関連技術ポイント</th></tr></thead><tbody><tr><td>計数器</td><td>Reactのライフサイクル、コンポーネント定義、JSX</td><td>ライフサイクル、コンポーネント定義、x-template</td></tr><tr><td>Likeコメント</td><td>コンポーネント定義、イベント、属性</td><td>コンポーネント定義、イベント、属性</td></tr><tr><td>一覧表示</td><td>コンポーネント定義、イベントへ値引き渡し</td><td>コンポーネント定義、イベントへ値引き渡し</td></tr><tr><td>マウスオーバー時情報を提示</td><td>Jsx、属性</td><td>bindディレクティブ</td></tr></tbody></table><p>では、早速ソースコードを見に行きましょう。</p><h3 id="秒計数器"><a href="#秒計数器" class="headerlink" title="秒計数器"></a>秒計数器</h3><p><img src="counter.gif" alt="実現効果図"></p><h4 id="React版"><a href="#React版" class="headerlink" title="React版"></a>React版</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 計数器</span><span class="token keyword">class</span> <span class="token class-name">CounterR</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>intervalId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>intervalId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"React Counter: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> domContainer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#counter_react'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token function">e</span><span class="token punctuation">(</span>CounterR<span class="token punctuation">)</span><span class="token punctuation">,</span> domContainer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解説：クラス式でコンポーネント定義する。一秒ごとにstateを変更して、変更した内容は画面に反映する。</p><h4 id="Vue版"><a href="#Vue版" class="headerlink" title="Vue版"></a>Vue版</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>counter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   Vue Counter: &#123;&#123; counter &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 計数器</span><span class="token keyword">const</span> Counter <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>intervalId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token operator">++</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">unmounted</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>intervalId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#counter'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解説：対象式でコンポーネント定義する。一秒ごとにdataを変更して、変更した内容は画面に反映する。</p><h3 id="Likeコメント"><a href="#Likeコメント" class="headerlink" title="Likeコメント"></a>Likeコメント</h3><p><img src="like.gif" alt="実現効果図"></p><h4 id="React版-1"><a href="#React版-1" class="headerlink" title="React版"></a>React版</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 一覧表示  </span><span class="token keyword">function</span> <span class="token function">VegetableItemReact</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>li className<span class="token operator">=</span><span class="token string">"list-group-item"</span> onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span> props<span class="token punctuation">.</span>clickHandler <span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span> props<span class="token punctuation">.</span>item<span class="token punctuation">.</span>text <span class="token punctuation">&#125;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>   <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">VegetableItemListReact</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">groceryList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>greet <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">groceryList</span><span class="token operator">:</span>  <span class="token punctuation">[</span>          <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'Vegetables'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'Cheese'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'Whatever else humans are supposed to eat'</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token comment">// `event` is the native DOM event</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">alert</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> todolist <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>groceryList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>VegetableItemReact item<span class="token operator">=</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span>  key<span class="token operator">=</span><span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span>id<span class="token punctuation">&#125;</span>  clickHandler<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token operator">></span><span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span>text<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>VegetableItemReact<span class="token operator">></span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span>produced by react<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>        <span class="token operator">&lt;</span>ol className<span class="token operator">=</span><span class="token string">"px-2"</span><span class="token operator">></span><span class="token punctuation">&#123;</span> todolist <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>ol<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> domContainer3 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#vegetable-list-app-react'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token function">e</span><span class="token punctuation">(</span>VegetableItemListReact<span class="token punctuation">)</span><span class="token punctuation">,</span> domContainer3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解説：イベントを発火し、dataを変更して、変更した内容は画面に反映する。</p><h4 id="Vue版-1"><a href="#Vue版-1" class="headerlink" title="Vue版"></a>Vue版</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x-template<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vue-like-template<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token operator">&lt;</span>button v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"!liked"</span> @click<span class="token operator">=</span><span class="token string">"toggle"</span><span class="token operator">></span>    Like by vue  <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span>template v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">></span>You liked comment number <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> commentID <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Likeコンポーネントを定義</span><span class="token keyword">const</span> likeComponent <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'commentID'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'#vue-like-template'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">liked</span><span class="token operator">:</span> <span class="token boolean">false</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>liked <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>liked<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Likeコンポーネントマウント</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.like_button_container_vue'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">domContainer</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Read the comment ID from a data-* attribute.</span>  <span class="token keyword">const</span> commentID <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>domContainer<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>commentid<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>likeComponent<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">commentID</span><span class="token operator">:</span> commentID <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span>domContainer<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解説：イベントを発火し、dataを変更して、変更した内容は画面に反映する。</p><h3 id="一覧表示"><a href="#一覧表示" class="headerlink" title="一覧表示"></a>一覧表示</h3><p><img src="list.gif" alt="実現効果図"></p><h4 id="React版-2"><a href="#React版-2" class="headerlink" title="React版"></a>React版</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 一覧表示  </span><span class="token keyword">function</span> <span class="token function">VegetableItemReact</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>li className<span class="token operator">=</span><span class="token string">"list-group-item"</span> <span class="token operator">></span><span class="token punctuation">&#123;</span> props<span class="token punctuation">.</span>item<span class="token punctuation">.</span>text <span class="token punctuation">&#125;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>   <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">VegetableItemListReact</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">groceryList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>greet <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">groceryList</span><span class="token operator">:</span>  <span class="token punctuation">[</span>          <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'Vegetables'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'Cheese'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'Whatever else humans are supposed to eat'</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token comment">// `event` is the native DOM event</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">alert</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> todolist <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>groceryList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>VegetableItemReact item<span class="token operator">=</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span>  key<span class="token operator">=</span><span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span>id<span class="token punctuation">&#125;</span>  onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token parameter">event</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token operator">></span><span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span>text<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>VegetableItemReact<span class="token operator">></span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span>produced by react<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>        <span class="token operator">&lt;</span>ol className<span class="token operator">=</span><span class="token string">"px-2"</span><span class="token operator">></span><span class="token punctuation">&#123;</span> todolist <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>ol<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> domContainer3 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#vegetable-list-app-react'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token function">e</span><span class="token punctuation">(</span>VegetableItemListReact<span class="token punctuation">)</span><span class="token punctuation">,</span> domContainer3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解説：実質パラメータと本来のイベントパラメータを引き渡して、イベントを発火する。</p><h4 id="Vue版-2"><a href="#Vue版-2" class="headerlink" title="Vue版"></a>Vue版</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x-template<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vegetable-component<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token operator">&lt;</span>h3<span class="token operator">></span>produced by vue<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>    <span class="token operator">&lt;</span>ol <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"px-2"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>VegetableItemVue <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"list-group-item"</span> @click<span class="token operator">=</span><span class="token string">"greet(item, $event)"</span>        v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item in groceryList"</span>        v<span class="token operator">-</span>bind<span class="token operator">:</span>item<span class="token operator">=</span><span class="token string">"item"</span>        v<span class="token operator">-</span>bind<span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"item.id"</span>      <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>VegetableItemVue<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ol<span class="token operator">></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 一覧表示</span><span class="token keyword">const</span> VegetableItemVue <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'item'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;li>&#123;&#123; item.text &#125;&#125;&lt;/li></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> VegetableItemListVue <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'#vegetable-component'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">groceryList</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'Vegetables'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'Cheese'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'Whatever else humans are supposed to eat'</span> <span class="token punctuation">&#125;</span>          <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        VegetableItemVue    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">alert</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>text<span class="token punctuation">)</span>          <span class="token comment">// `event` is the native DOM event</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>VegetableItemListVue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#vegetable-list-app-vue'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解説：実質パラメータと本来のイベントパラメータを引き渡して、イベントを発火する。注意してほしいのは<br>Vueの実現方法はReactと異なって、Vueは自己定義したコンポーネント上に@clickを利用できる。</p><h3 id="マウスオーバー時情報を提示"><a href="#マウスオーバー時情報を提示" class="headerlink" title="マウスオーバー時情報を提示"></a>マウスオーバー時情報を提示</h3><p><img src="hover.gif" alt="実現効果図"></p><h4 id="React版-3"><a href="#React版-3" class="headerlink" title="React版"></a>React版</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">BindAttributeComponentR</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>span title<span class="token operator">=</span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span><span class="token operator">></span>    マスクをオバーしたら情報をポップアップする！By React  <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>   <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> domContainer4 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#bind-attribute-react'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token function">e</span><span class="token punctuation">(</span>BindAttributeComponentR<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'You loaded this page on '</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> domContainer4<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Vue版-3"><a href="#Vue版-3" class="headerlink" title="Vue版"></a>Vue版</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bind-attribute<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    マスクをオバーしたら情報をポップアップする！By Vue  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> AttributeBinding <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'You loaded this page on '</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>AttributeBinding<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#bind-attribute'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="GITHUBに用例ソース"><a href="#GITHUBに用例ソース" class="headerlink" title="GITHUBに用例ソース"></a>GITHUBに用例ソース</h3><p>上記に示されたソースをGitHubにもアップされましたので、<br>興味を持っている方はこのリンクまでご参照ください。<br><a href="https://github.com/kevin-hans/react-vs-vue">https://github.com/kevin-hans/react-vs-vue</a></p>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> vue </tag>
            
            <tag> event </tag>
            
            <tag> property </tag>
            
            <tag> functional component </tag>
            
            <tag> class component </tag>
            
            <tag> jsx </tag>
            
            <tag> x-template </tag>
            
            <tag> component lifecycle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>私が作ったツール紹介（GIT関連）</title>
      <link href="/2022/02/09/experience-in-the-past-source-version-management/"/>
      <url>/2022/02/09/experience-in-the-past-source-version-management/</url>
      
        <content type="html"><![CDATA[<h3 id="ツールを作る背景紹介"><a href="#ツールを作る背景紹介" class="headerlink" title="ツールを作る背景紹介"></a>ツールを作る背景紹介</h3><p>PJにGitの初心者がたくさんいる。Gitの基本操作（commit, pull, push）以外、merge及びConflictの操作はたまにある。<br>結果的に、Git操作ミスが多発してしまい、バージョン管理が混乱になる。</p><h3 id="背景の窮境を乗り越える対策"><a href="#背景の窮境を乗り越える対策" class="headerlink" title="背景の窮境を乗り越える対策"></a>背景の窮境を乗り越える対策</h3><ul><li>Git操作を難易度（レベル）に分ける</li><li>PJメンバーのGit技能の熟練度を考えて、リーズナブルな構成管理方針を策定する</li><li>PJメンバーへの教育を施す。</li><li>ツールを（作成）導入して、手作業をできるだけ避けて、手作業ミスを避ける</li></ul><h3 id="ツール紹介"><a href="#ツール紹介" class="headerlink" title="ツール紹介"></a>ツール紹介</h3><h4 id="コミットごとにコミット情報一覧出力"><a href="#コミットごとにコミット情報一覧出力" class="headerlink" title="コミットごとにコミット情報一覧出力"></a>コミットごとにコミット情報一覧出力</h4><p>Gitコミット一覧ファイルからコミット一覧を読み込んで<br>指定されたGitから歴史コミット情報を取得しながらファイルの形に出力すること。</p><ul><li>コミット提出者</li><li>日時</li><li>コミット内容</li><li>コミットID</li><li>ソースファイル</li></ul><blockquote><p>使用例：</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">.</span>\getGitCommitInfo<span class="token punctuation">.</span>ps1 logfilename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Or</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">.</span>\getGitCommitInfo<span class="token punctuation">.</span>ps1 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="改修ソースを拾う"><a href="#改修ソースを拾う" class="headerlink" title="改修ソースを拾う"></a>改修ソースを拾う</h4><p>Gitバージョンのコミットを指定して、対象ソースをフォルダー階層を維持しながら拾う。</p><blockquote><p>使用例：</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token punctuation">.</span>\pickupGitFiles<span class="token punctuation">.</span>ps1 &lt;SHA><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="ソースの手入れ"><a href="#ソースの手入れ" class="headerlink" title="ソースの手入れ"></a>ソースの手入れ</h3><p> <a href="https://github.com/kevin-hans/tools">https://github.com/kevin-hans/tools</a>から取得できます。</p><p>ツールインストール方法もそのページをご参照ください。</p>]]></content>
      
      
      <categories>
          
          <category> ツール </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> powershell </tag>
            
            <tag> 構成管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iframe-in-html</title>
      <link href="/2021/10/05/iframe-in-html/"/>
      <url>/2021/10/05/iframe-in-html/</url>
      
        <content type="html"><![CDATA[<h2 id="frameとframesetからの説明"><a href="#frameとframesetからの説明" class="headerlink" title="frameとframesetからの説明"></a>frameとframesetからの説明</h2><p>iframeを話す前に、とりあえず似る言葉frameとframesetから説明しましょう。<br>frameとは、ウィンドウを分割に区切って、その中にそれぞれ別のHTML文章を表示させる機能を実現できます。<br>ウィンドウをどのように区切るかを指定するのがframeset要素です。<br>でも、注意しなければならないのは、frameとframesetは既に時代遅れの仕様となってしまったようです。<br>2002年に第二版XHTML1.0 以降、frameとframesetがなくなりました。</p><p>注意：フレームを定義するHTML文書では、&lt;!DOCTYPE&gt;として「Framesetset」を指定することに注意してください。</p><h2 id="what-is-iframe"><a href="#what-is-iframe" class="headerlink" title="what is iframe"></a>what is iframe</h2><p>インラインフレーム（inline frame）です。<br>iframeも昔（1997）から導入された元素ですが、HTML5の今でもiframeが生きています。<br>役割は前述のframeとframesetの機能と異なって、ウィンドウを分割する形式のフレームではなく、ウィンドウの中に独立して表示される。<br>フレーム内には、src属性で指定された内容が表示されます。</p><p><code>&lt;iframe&gt;</code>〜<code>&lt;iframe&gt;</code>の間には、このフレームをサポートしていないブラウザや、フレームを表示しないように設定している場合に表示させたい内容を指定して置きます。<br>このフレームはiframeset要素で定義されるフレームとは異なり、<code>&lt;!DOCTYPE&gt;</code>が「Transitional」の場合でも使用することができます。</p><blockquote><p>豆知識<br>HTML5時代、<code>&lt;!DOCTYPE html&gt;</code>のように宣言してください。&lt;!DOCTYPE&gt;は要素ではないとご注意ください。</p></blockquote><h2 id="why-to-use-iframe"><a href="#why-to-use-iframe" class="headerlink" title="why to use iframe"></a>why to use iframe</h2><p>iframeは一般的にセキュリティ上の配慮で望ましくないと思われますが、下記の原因でよく使われています。</p><ol><li><p>親コンテナーとJavascriptとCSSコンテクストを隔離すること。</p></li><li><p>サードパーティからのサービスをプラグインの形で素早く埋め込むこと。Googleの地図、FaceBookとTwitterのシェア、チャットポート、adsなど</p></li></ol><h2 id="how-to-use-iframe"><a href="#how-to-use-iframe" class="headerlink" title="how to use iframe"></a>how to use iframe</h2><h3 id="HTML属性の形に利用すること"><a href="#HTML属性の形に利用すること" class="headerlink" title="HTML属性の形に利用すること"></a>HTML属性の形に利用すること</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://logrocket.com/<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span> <span class="token special-attr"><span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">onError</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>560<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>315<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.youtube.com/embed/xJVHWhO9bJY<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>YouTube video player<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">allow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture<span class="token punctuation">"</span></span> <span class="token attr-name">allowfullscreen</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>divなどを囲んでStyleを設定することをできる</p></blockquote><blockquote><p>属性 </p></blockquote><ul><li>src</li><li>srcdoc</li><li>height</li><li>width</li><li>name</li><li>allow</li><li>referrer policy</li><li>sandbox</li></ul><blockquote><p>イベント</p></blockquote><ul><li>load</li><li>error</li></ul><h3 id="JavaScriptで利用すること"><a href="#JavaScriptで利用すること" class="headerlink" title="JavaScriptで利用すること"></a>JavaScriptで利用すること</h3><h4 id="iframe作成"><a href="#iframe作成" class="headerlink" title="iframe作成"></a>iframe作成</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// For a new iframe</span><span class="token keyword">const</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iframe<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"The iframe is loaded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>iframe<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Something wrong happened"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>iframe<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"https://logrocket.com/"</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="iframe使用"><a href="#iframe使用" class="headerlink" title="iframe使用"></a>iframe使用</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; For an existing iframeconst iframe &#x3D; document.querySelector(&#39;.my-iframe&#39;);iframe.onload &#x3D; function() &#123;  console.log(&quot;The iframe is loaded&quot;);&#125;iframe.onerror &#x3D; function() &#123;  console.log(&quot;Something wrong happened&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="iframeとの通信"><a href="#iframeとの通信" class="headerlink" title="iframeとの通信"></a>iframeとの通信</h2><p>postMessageを利用することで、iframeとの通信できます。</p><h3 id="受信内容の属性"><a href="#受信内容の属性" class="headerlink" title="受信内容の属性"></a>受信内容の属性</h3><ul><li>event.origin = The origin of the window that sent the message at the time postMessage was called. We want this to be a domain we trust.</li><li>event.data = The data that gets passed through with the postMessage function.</li><li>event.source = Reference to the window that sent the message.</li></ul><h3 id="発信"><a href="#発信" class="headerlink" title="発信"></a>発信</h3><ul><li>postMessage() = function we call in order to pass data to another window.</li></ul><h3 id="親コンテナー発信→iframe受信"><a href="#親コンテナー発信→iframe受信" class="headerlink" title="親コンテナー発信→iframe受信"></a>親コンテナー<em>発信</em>→iframe受信</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// contentWindowはiframeに対応するwindow</span><span class="token keyword">const</span> myiframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'myIframe'</span><span class="token punctuation">)</span>myIframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">'message from parent window'</span><span class="token punctuation">,</span> <span class="token string">"http://window.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="親コンテナー発信→inframe受信"><a href="#親コンテナー発信→inframe受信" class="headerlink" title="親コンテナー発信→inframe受信"></a>親コンテナー発信→inframe<em>受信</em></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>data <span class="token operator">==</span> <span class="token string">'message from parent window'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">console</span><span class="token punctuation">(</span><span class="token string">'Message received!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="iframe発信→-親コンテナー受信"><a href="#iframe発信→-親コンテナー受信" class="headerlink" title="iframe発信→ 親コンテナー受信"></a>iframe<em>発信</em>→ 親コンテナー受信</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">targetWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> targetOrigin<span class="token punctuation">,</span> <span class="token punctuation">[</span>transfer<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>The targetWindow <span class="token keyword">in</span> our <span class="token keyword">case</span> could be either window<span class="token punctuation">.</span><span class="token function">parent</span> <span class="token punctuation">(</span>immediate parent window<span class="token punctuation">)</span> or window<span class="token punctuation">.</span><span class="token function">top</span> <span class="token punctuation">(</span>the most far outer window<span class="token punctuation">)</span> because they are the same <span class="token keyword">in</span> our scenario<span class="token punctuation">.</span> But since it is generally possible to nest multiple Iframes it is important to be aware <span class="token keyword">of</span> the difference<span class="token punctuation">.</span> In doubt pick window<span class="token punctuation">.</span>top because it will definitely reach the client window and not another parent Iframe by accident<span class="token punctuation">.</span> As message we will send “message we expect” and the targetOrigin is the domain <span class="token keyword">of</span> our outer window’s domain<span class="token punctuation">.</span><span class="token comment">// Example</span>top<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"message from iframe"</span><span class="token punctuation">,</span> <span class="token string">"http://window.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="iframe発信→親コンテナー受信"><a href="#iframe発信→親コンテナー受信" class="headerlink" title="iframe発信→親コンテナー受信"></a>iframe発信→親コンテナー<em>受信</em></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Control the XSS risk by checking the origin</span><span class="token keyword">function</span> <span class="token function">receiveMessage</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>origin <span class="token operator">===</span> <span class="token string">"http://iframe.com"</span>         <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>data <span class="token operator">===</span> <span class="token string">"message we expect"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// execute code</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// event listener for message event</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> receiveMessage<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// More safe by restricting event.data to a specific length and test for typeof string</span><span class="token keyword">function</span> <span class="token function">receiveMessage</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>origin <span class="token operator">===</span> <span class="token string">"http://iframe.com"</span>        <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>data <span class="token operator">===</span> <span class="token string">"message we expect"</span>        <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">19</span>        <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> event<span class="token punctuation">.</span>data <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// execute code</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// event listener for message event</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> receiveMessage<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="RISK-when-using-iframe"><a href="#RISK-when-using-iframe" class="headerlink" title="RISK when using iframe"></a>RISK when using iframe</h2><p>割愛ですが、かきのリンクをご読みください。<br><a href="https://en.wikipedia.org/wiki/Cross-site_scripting">XSSのリスク</a> </p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://blog.logrocket.com/the-ultimate-guide-to-iframes/">The ultimate guide to iframes</a></p></li><li><p><a href="https://www.aaronpeters.nl/blog/iframe-loading-techniques-and-performance/">Iframe Loading Techniques and Performance</a></p></li><li><p><a href="https://www.ilearnjavascript.com/plainjs-postmessage-and-iframes/">PLAINJS: POSTMESSAGE() AND IFRAMES</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iframe </tag>
            
            <tag> html </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>パフォーマンス</title>
      <link href="/2021/01/18/performance-tuning/"/>
      <url>/2021/01/18/performance-tuning/</url>
      
        <content type="html"><![CDATA[<h1 id="パフォーマンス"><a href="#パフォーマンス" class="headerlink" title="パフォーマンス"></a>パフォーマンス</h1><p>よく性能とも言います。本文は一概に性能に統一します。</p><h2 id="性能とは"><a href="#性能とは" class="headerlink" title="性能とは"></a>性能とは</h2><p>ITエンジニアとして、性能問題に悩まった場面が少なくないでしょう。<br>ある場合に、地獄に陥るような厄介にぶつかった時、どうすればいいのか興味がある人がたくさんいると思いますので、性能の話題を少し説明させて頂きます。<br>本題に入る前に、まずは一つの質問を提出致します。<br>性能問題とは、一体何を指しますか。<br>普通的に考えると、アプリ実行が遅かったり、機器負荷が重かったり、レスポンス時間が長かったりするものでしょう。でも深く考えると、性能の評価は実の需要に離れないと思います。<br>例にすると、証券売買システムと普通のウェブシステムとは、性能需要のレベルが全然違うでしょう。</p><h2 id="性能目標の仕組"><a href="#性能目標の仕組" class="headerlink" title="性能目標の仕組"></a>性能目標の仕組</h2><p>厳密にいえば、この性能需要を性能目標と言えます。<br>では、性能目標とはなんですか。</p><p>性能目標、一般的にプロダクトを参画する時、要件定義フェーズ時非機能要件として、性能目標を定めています。<br>主な性能評価指標は下記のように分解できます。</p><ul><li>レスポンスタイム</li><li>ターンアラウンドタイム</li><li>スループット</li><li>TPS（１秒間に処理できるトランザクション数）</li></ul><p>なお、性能指標を評価するために、前提条件が不可欠ないと思います。<br>例えば、同時にログイン利用しているユーザー数とか、DBの主なテーブルに格納するレコード数とかなど。違う前提条件は性能指標の確定は根なしでしょう。<br>だから要件定義には、前提条件を書かなければならないです。</p><h2 id="性能目標を達成する手法"><a href="#性能目標を達成する手法" class="headerlink" title="性能目標を達成する手法"></a>性能目標を達成する手法</h2><p>主な性能指標を決めた後、アーキテクチャより技術スタックを選別します。</p><p>典型的なWEBシステムを例にして説明しましょう。<br>ブラウザからサーバーまでの通信時間、サーバーにリクエストを受付してから、必要な処理した後DBに渡すまで所要の時間、<br>DB処理所要の時間、DB処理完了した後、結果よりレスポンスを生成する所要の時間、生成されたレスポンスをブラウザまで通信所要の時間など。<br>なお、生産環境に障害対処、証跡記録のためログの書込みに所要の時間も考慮しなければならないです。</p><p>この段階によく発生するのはトレードオフ（trade-off）です。<br>開発フェーズ、ランニングフェーズのコストを考えなければならないです。<br>たとえば開発段階に技術者獲得難易度とか、技術ことの生産性とか。ランニングフェーズに、クラウドサービスのコストとか。</p><h2 id="性能問題の解決手法"><a href="#性能問題の解決手法" class="headerlink" title="性能問題の解決手法"></a>性能問題の解決手法</h2><p>次に、性能に問題が発生すると、どのように解決すればいいのか説明していきます。</p><h3 id="ボトルネックの特定"><a href="#ボトルネックの特定" class="headerlink" title="ボトルネックの特定"></a>ボトルネックの特定</h3><p>性能問題を解決するために、一番重要なものはボトルネックの特定です。<br>ボトルネックを特定できれば、半分の性能問題を解決されたといっても過言ではありません。<br>なぜなら、ボトルネックを特定しなければ、性能問題を解消できる対策を打てないでしょう。<br>では、どうすればボトルネックを特定できるか。筆者の経験より、ログを参照することが一番重要だと思います。<br>ログよりネットワーク通信時間、本処理を入る前に認証・認可の時間、アプリの処理時間、DB処理時間が見えます。</p><h3 id="ボトルネックの消去"><a href="#ボトルネックの消去" class="headerlink" title="ボトルネックの消去"></a>ボトルネックの消去</h3><p>分野ことに対策を説明しましょう。</p><h4 id="ネットワーク通信"><a href="#ネットワーク通信" class="headerlink" title="ネットワーク通信"></a>ネットワーク通信</h4><ul><li>CDNの使用</li><li>クラウドのリージョンの増設＆調整</li><li>ゾーンの増設＆調整</li></ul><h4 id="アプリ側問題"><a href="#アプリ側問題" class="headerlink" title="アプリ側問題"></a>アプリ側問題</h4><ul><li>処理並行化検討（マルチスレッドなど）</li><li>スケールアウト（負荷分散）</li><li>スケールアップ</li></ul><h4 id="DB側の問題"><a href="#DB側の問題" class="headerlink" title="DB側の問題"></a>DB側の問題</h4><ul><li>INDEX周り</li><li> キャッシュの導入</li><li>Master /Slaveの導入、読み書きの分離</li><li>散らしの処理をバルク処理に変換（一般的にアプリの改修も伴う）</li></ul><h4 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h4><ul><li>業務上不急の処理を切り出し、非同期処理させる</li><li>キュー（Queue）を導入して、集中処理から分散処理へ変換する</li></ul>]]></content>
      
      
      <categories>
          
          <category> ノウハウ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> パフォーマンス </tag>
            
            <tag> 性能 </tag>
            
            <tag> チューニング </tag>
            
            <tag> レスポンスタイム </tag>
            
            <tag> ターンアラウンドタイム </tag>
            
            <tag> スループット </tag>
            
            <tag> TPS </tag>
            
            <tag> ボトルネック </tag>
            
            <tag> CDN </tag>
            
            <tag> マルチスレッド </tag>
            
            <tag> Multi Thread </tag>
            
            <tag> スケールアウト </tag>
            
            <tag> スケールアップ </tag>
            
            <tag> 負荷分散 </tag>
            
            <tag> キャッシュ </tag>
            
            <tag> Master /Slave </tag>
            
            <tag> バルク </tag>
            
            <tag> 非同期 </tag>
            
            <tag> キュー </tag>
            
            <tag> Queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>なぜソースファイルおよびメソッドの規模を適当にコントロールするか</title>
      <link href="/2020/08/10/experience-in-the-past-source-step-count/"/>
      <url>/2020/08/10/experience-in-the-past-source-step-count/</url>
      
        <content type="html"><![CDATA[<p>新規開発チームに入る時、配られたコーディング規約にはクラス、メソッドの規模ルールが定めていることが少なくないでしょう。<br>プロジェクトことに数値が異なると思いますが。</p><h3 id="規模を適当に統制の理由"><a href="#規模を適当に統制の理由" class="headerlink" title="規模を適当に統制の理由"></a>規模を適当に統制の理由</h3><ul><li><p>設計上の不足（ミス）を発見できる</p><blockquote><p>詳細設計を製造のインプットとする場合絶対に注意を払わなければならないです。過大設計または分解不足でソース規模が過大の原因となります。</p></blockquote></li><li><p>製造上品質低下を抑える</p><blockquote><p>共通化検討していないか、重複なソースは多箇所に存在するかなど、デザインパターン（design pattern）を適当に導入されるかが見極めることができると思います。</p></blockquote></li></ul><h3 id="規模を適当に統制されない場合"><a href="#規模を適当に統制されない場合" class="headerlink" title="規模を適当に統制されない場合"></a>規模を適当に統制されない場合</h3><ul><li>ソースコードの可読性が悪くなる。</li><li>ソースコードの保守が難しくなる。</li><li>バグの対応が難しくなる。</li><li>変更の対応が難しくなる。</li><li>デグレードが容易的に発生し、品質確保が難しくなる。</li><li>お客様から文句がくるし、信頼関係を構築しにくい。</li></ul><h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><h4 id="発生防止策"><a href="#発生防止策" class="headerlink" title="発生防止策"></a>発生防止策</h4><ul><li>コーディング規約をちゃんと策定する</li><li>規約は字面に留まるだけではなく、ツール導入（Checkstyleとか、Sonarqubeとか）して、人工ではなく、機器より規約を守ってくれる。</li></ul><h4 id="発生解決策"><a href="#発生解決策" class="headerlink" title="発生解決策"></a>発生解決策</h4><ul><li>ソースリファクタリング　　</li><li>CI/CDを導入する　　　　 </li><li>リーズナブルな配置管理ルールを策定する</li></ul><h3 id="ソース規模とソース複雑度の関係"><a href="#ソース規模とソース複雑度の関係" class="headerlink" title="ソース規模とソース複雑度の関係"></a>ソース規模とソース複雑度の関係</h3><p>ソースの規模だけでソースメトリックとして簡単すぎじゃないですかと疑う人がいると思いますが、単純に単ソースのソース規模が過大になると裏には製造時の考慮不足とリファクタリング不足との繋がりがよくあり、保守性が言えないでしょう。</p><p>興味があれば、ソース評価に詳しい手法は下記Sonarqubeの文章をご参照頂ければと思います。<br><a href="https://docs.sonarqube.org/latest/user-guide/metric-definitions/">ソースメトリックの定義</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://stackoverflow.com/questions/1086851/good-practice-class-line-count">ソース規模の目安についての問答</a><br><a href="https://google.github.io/styleguide/javaguide.html">Google社のコーディング規約</a></p>]]></content>
      
      
      <categories>
          
          <category> ノウハウ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ソース規模 </tag>
            
            <tag> 品質 </tag>
            
            <tag> デグレード </tag>
            
            <tag> Sonarqube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>トラブルシューティングによく使われるGIT操作</title>
      <link href="/2020/03/16/frequently-used-git-cmd/"/>
      <url>/2020/03/16/frequently-used-git-cmd/</url>
      
        <content type="html"><![CDATA[<p>シーンことに使えるコマンドを紹介させて頂きます。</p><h3 id="バグをどなたがどのコミットで取り込んだか"><a href="#バグをどなたがどのコミットで取り込んだか" class="headerlink" title="バグをどなたがどのコミットで取り込んだか"></a>バグをどなたがどのコミットで取り込んだか</h3><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">git blame -- &lt;path&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="あるソースに加えたコミットの変更内容を確認"><a href="#あるソースに加えたコミットの変更内容を確認" class="headerlink" title="あるソースに加えたコミットの変更内容を確認"></a>あるソースに加えたコミットの変更内容を確認</h3><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">git diff &lt;SHA&gt; -- &lt;path&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="あるコミットが影響するソース一覧"><a href="#あるコミットが影響するソース一覧" class="headerlink" title="あるコミットが影響するソース一覧"></a>あるコミットが影響するソース一覧</h3><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">git show --pretty&#x3D;&quot;&quot; --name-only &lt;SHA&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="あるブランチにあるコミット一覧"><a href="#あるブランチにあるコミット一覧" class="headerlink" title="あるブランチにあるコミット一覧"></a>あるブランチにあるコミット一覧</h3><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">git log --no-merges &lt;branch name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="あるブランチにある人が提出したコミット一覧"><a href="#あるブランチにある人が提出したコミット一覧" class="headerlink" title="あるブランチにある人が提出したコミット一覧"></a>あるブランチにある人が提出したコミット一覧</h3><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">git log --no-merges --author&#x3D;&quot;&lt;user name&gt;&quot; &lt;branch name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="ある行の内容をどのコミットで失うか"><a href="#ある行の内容をどのコミットで失うか" class="headerlink" title="ある行の内容をどのコミットで失うか"></a>ある行の内容をどのコミットで失うか</h3><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">git log -S&lt;string&gt; -- &lt;path&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>または</p><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">git log -G&lt;regex&gt; -- &lt;path&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ノウハウ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ダブルコロン(::)演算子とラムダ式</title>
      <link href="/2018/10/23/java-double-colon-operator/"/>
      <url>/2018/10/23/java-double-colon-operator/</url>
      
        <content type="html"><![CDATA[<h2 id="ダブルコロン-演算子とラムダ式"><a href="#ダブルコロン-演算子とラムダ式" class="headerlink" title="ダブルコロン(::)演算子とラムダ式"></a>ダブルコロン(::)演算子とラムダ式</h2><p>二重コロン(::)演算子とも言えます。実質はラムダ式の一種であると思います。<br>伝統的なラムダ式定義よりもっと簡単になる一方で、既存の資産もよく生かすできるようになりました。これは最大のメリットだと言っても過言ではないです。</p><h3 id="ラムダ式の定義方法"><a href="#ラムダ式の定義方法" class="headerlink" title="ラムダ式の定義方法"></a>ラムダ式の定義方法</h3><p>普通にはラムダ式を下記のように定義されています。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>引数<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>処理<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>or</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="ダブルコロン-演算子を利用したら"><a href="#ダブルコロン-演算子を利用したら" class="headerlink" title="ダブルコロン(::)演算子を利用したら"></a>ダブルコロン(::)演算子を利用したら</h3><p>ダブルコロン(::)演算子を利用したら、簡単に既に定義していたクラスのメソッドをラムダ式へ変換できます。<br>ダブルコロン演算子は下記５種類があります。</p><h4 id="クラスの静的メソッド"><a href="#クラスの静的メソッド" class="headerlink" title="クラスの静的メソッド"></a>クラスの静的メソッド</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ClassName</span><span class="token operator">::</span><span class="token function">staticMethodName</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="クラスのインスタンスメソッド"><a href="#クラスのインスタンスメソッド" class="headerlink" title="クラスのインスタンスメソッド"></a>クラスのインスタンスメソッド</h4><p> 構文<br> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ClassName</span><span class="token operator">::</span><span class="token function">instanceMethodName</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><h4 id="インスタンスメソッド"><a href="#インスタンスメソッド" class="headerlink" title="インスタンスメソッド"></a>インスタンスメソッド</h4><p>構文</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">object<span class="token operator">::</span><span class="token function">instanceMethodName</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="親クラスのメソッド"><a href="#親クラスのメソッド" class="headerlink" title="親クラスのメソッド"></a>親クラスのメソッド</h4><p>構文</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">（<span class="token keyword">super</span> <span class="token operator">::</span> <span class="token function">methodName</span>）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="コンストラクター"><a href="#コンストラクター" class="headerlink" title="コンストラクター"></a>コンストラクター</h4><p>構文</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">（<span class="token class-name">ClassName</span> <span class="token operator">::</span> <span class="token keyword">new</span>）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参考：<br><a href="https://www.baeldung.com/java-8-double-colon-operator">The Double Colon Operator in Java 8</a><br><a href="https://mkyong.com/java8/java-8-method-references-double-colon-operator/">Java 8 method references, double colon (::) operator</a></p>]]></content>
      
      
      <categories>
          
          <category> 言語 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lambda </tag>
            
            <tag> FunctionalInterface </tag>
            
            <tag> double colon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ラムダ式（lambda）</title>
      <link href="/2018/10/16/java-lambda/"/>
      <url>/2018/10/16/java-lambda/</url>
      
        <content type="html"><![CDATA[<h2 id="ラムダ式（lambda）"><a href="#ラムダ式（lambda）" class="headerlink" title="ラムダ式（lambda）"></a>ラムダ式（lambda）</h2><p>従来には、メソッドを呼び出す時、引き渡すのは一律データでしょう。ラムダ式を利用して、コードもデータのように扱えました。すなわちデータ自身だけではなく、データの処理ロジックもデータと扱えました。</p><blockquote><p>Lambdas let you treat code as data.<br>この革新よりいろいろな便利をもたらしました。</p></blockquote><p>ラムダ式は事実的に<br>ラムダ式（lambda）は、匿名クラスの簡素化書き方です。この匿名クラスは機能インターフェース（FunctionalInterface）として知られています。</p><p> 例を挙げて説明しましょう。<br> 機能インターフェース（FunctionalInterface）匿名クラス例<br> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"node"</span><span class="token punctuation">,</span> <span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token string">"python"</span><span class="token punctuation">,</span> <span class="token string">"ruby"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">new</span>  <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// anonymous class  </span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span>  <span class="token keyword">void</span>  <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>今ラムダ式に書き換えます。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"node"</span><span class="token punctuation">,</span> <span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token string">"python"</span><span class="token punctuation">,</span> <span class="token string">"ruby"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>str <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"node"</span><span class="token punctuation">,</span> <span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token string">"python"</span><span class="token punctuation">,</span> <span class="token string">"ruby"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>簡単かつ読みやすくになるでしょうか。</p><p>でも、ここに説明しなければならないのはラムダ式は<br>機能インターフェース（FunctionalInterface）を完全に置き換えるわけではありません。</p><p>機能インターフェースに一つメソッドしかないの場合、ラムダ式に書き換えますが、二つ以上のメソッドがある場合、機能インターフェース（FunctionalInterface）を利用しなければならないです。<br>かつ、機能インターフェース（FunctionalInterface）はインターフェースの一種として、継承などのJAVA特性を利用して別の効果が期待できると思います。</p><h3 id="おまけ-ラムダ式の進化版ダブルコロン"><a href="#おまけ-ラムダ式の進化版ダブルコロン" class="headerlink" title="おまけ-ラムダ式の進化版ダブルコロン(::)"></a>おまけ-ラムダ式の進化版ダブルコロン(::)</h3><p>軽く触りますが、もっと簡単な書き方があります。<br>それはダブルコロン(::)です。<br>例を下記のように示されましたが、興味があれば、別の文章に移ってください。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"node"</span><span class="token punctuation">,</span> <span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token string">"python"</span><span class="token punctuation">,</span> <span class="token string">"ruby"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.informit.com/articles/article.aspx?p=2191423&seqNum=2">Java SE 8’s New Language Features, Part 1: Interface Default/Static Methods and Lambda Expressions</a></p>]]></content>
      
      
      <categories>
          
          <category> 言語 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lambda </tag>
            
            <tag> FunctionalInterface </tag>
            
            <tag> Anonymous Class </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
